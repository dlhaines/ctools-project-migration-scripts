#!/usr/bin/env bash
# Generate sql query file for specific CTools read only tasks.

#set -x
# Be fussy and find bugs early :-)
set -e
set -u

# default to packed script but use pl version if more recent.
PREFIX="./generateBatchROSqlSite.pl"
PACKED=${PREFIX}.packed
SCRIPT=$PACKED

# use plain perl version if it is more recent.
if [ -e "${PREFIX}" ] && [ "${PREFIX}" -nt "$PACKED" ]; then
    echo "USING MORE RECENT PERL SCRIPT";
    SCRIPT=$PREFIX;
fi

help_text=$( cat<<'EOF'
$0: {task} {configuration file}

Generate varous types of sql for the CTools site read-only process. It will
read a configuration file with information on roles, realms, functions to modify,
site ids, site types, table names to reference. 

For changes to make sites read only the site list is generated by the looking at 
site types. Specific sites can be excluded from the process by site id. For changes
to restore permissions to sites the site ids must be listed explicitly. See the 
*.template.yml file.

The possible Read Only tasks are:
  READ_ONLY_LIST and READ_ONLY_UPDATE: generate the list of sites that will be updated
     or run the actual update.
  READ_ONLY_RESTORE_LIST and READ_ONLY_RESTORE: Print the list of sites to restore or
     actually run the restore.

  ACTION_LOG_LIST, ACTION_LOG_COUNT, or ACTION_LOG_UPDATE: Print or count the sites
    that would be affected by a modification or update the ACTION_LOG table to record
    the change.  Note that since this works on the list of sites that would be updated it 
    is only accurate if it is run before the actual site update query is run.

The sql queries will be put in a file named in the following format:
   <configuration file name>.<time stamp>.<task>.sql
For example: BatchROSql-CTDEV.specialized_projects.yml.2018-05-31-15-27.ACTION_LOG_COUNT.sql
EOF
         )

############## functions
# Take list of sites and print them in yaml format as excluded sites.
function addExemptSitesAsYAML {
    local file=$1
    echo -e "\n#excluded sites added from ${file}"
    echo -e "\nexcludedSites:"
    cat $file | cut  -f1 -d' ' | perl -n -e'print("    - $_") if (length($_) > 1)'
}

# generate nice time stamp
function niceTimestamp {
    echo $(date +"%F-%H-%M")
}
####################################

## try to be helpful if caller isn't being.
if [ $# -eq 0 ]; then
    echo "${help_text}"
    exit 1
fi

######## Check for task type specification.
# case insensitive match
# Only check for plausible match.  Let perl scripts
# do final checking.
shopt -s nocasematch

TASK=$1

if [[ $TASK =~ "READ_ONLY_" ]];
then
    :
elif [[ $TASK =~ "ACTION_LOG_" ]];
then
    :
else
    echo "Must specify plausible task"
    exit 1;
fi

######

CONFIG=${2:-ROSql-20161206-PROD.yml}

if [ ! -e "${CONFIG}" ]; then
    echo "$0: ERROR: config file ${CONFIG} does not exist.";
    exit 1;
fi

T=$(niceTimestamp)

# Write an updated config file appending the sites to be excluded.

NEW_CONFIG=${CONFIG}.${T}.yml

echo -e "# Generated automatically from ${CONFIG} at ${T}\n" >| ${NEW_CONFIG}
cat ${CONFIG} >> ${NEW_CONFIG}

if [[ -e "excludedSites.csv" ]] ; then
    addExemptSitesAsYAML "excludedSites.csv" >> ${NEW_CONFIG}
fi

if [[ -e "exemptsites.csv" ]] ; then
    addExemptSitesAsYAML "exemptsites.csv" >> ${NEW_CONFIG}
fi

echo "running: ${SCRIPT} ${TASK} ${NEW_CONFIG} >| ${NEW_CONFIG}.${TASK}.sql"
${SCRIPT} ${TASK} ${NEW_CONFIG} >| ${NEW_CONFIG}.${TASK}.sql

#end
